import base64
exec(base64.b64decode('#coding: utf-8
import os,time
board=[" "," "," ",
       " "," "," ",
       " "," "," "]
os.system("clear")
pattern=[[4,0,8],[1,4,7],[0,1,2],[0,3,6],[8,7,6],[2,4,6],[3,4,5],[2,5,8]]
mymuv=[]
def bestmuv(lastmoves):
    global board,player2,turn,pattern
    emty=[]
    for n,enmu in enumerate(board):
        if enmu == player1:
           emty.append(n)
    for i in pattern:
      if mymuv==[]:
        if lastmoves in i and turn == player2:
	   for b in i:
	       if board[b] == " ":
		  board[b] = player2
		  mymuv.append(b);raw_input("first stage")
                  pattern.remove(i)
		  turn=player1
		  break

      else:
        ctn = True
        go = 0
        if lastmoves in i and turn == player2:
	 if i[0] in emty and  i[1] in emty:
            if i[0] not in mymuv and i[1] not in mymuv  and i[2] not in mymuv:
              for b in i:
               if board[b] == " ":
                  pattern.remove(i);raw_input("11")
                  board[b] = player2
                  mymuv.append(b)
                  botmove=b
                  turn=player1
                  ctn=False
                  break
            else:
               pattern.remove(i)
         elif i[0] in emty and i[2] in emty:
	    if i[0] not in mymuv and i[1] not in mymuv  and i[2] not in mymuv:
              for b in i:
               if board[b] == " ":
                  pattern.remove(i);raw_input("12")
                  board[b] = player2
                  mymuv.append(b)
                  botmove=b
                  turn=player1
                  ctn=False
                  break
            else:
               pattern.remove(i)
	 elif i[1] in emty and i[2] in emty:
	    if i[0] not in mymuv and i[1] not in mymuv  and i[2] not in mymuv:
              for b in i:
               if board[b] == " ":
                  pattern.remove(i);raw_input("13")
                  board[b] = player2
                  mymuv.append(b)
                  botmove=b
                  turn=player1
                  ctn=False
                  break
            else:
               pattern.remove(i)
	 else:
	   pass
    for i in pattern:
        if lastmoves in i and turn == player2:
	    if i[0] not in mymuv or i[1] not in mymuv or i[2] not in mymuv:
		  for b in i:
                      if board[b] == " ":
	                  pattern.remove(i)
	                  board[b] = player2
        	          mymuv.append(b)
        	          botmove=b
        	          turn=player1
        	          ctn=False
        	          return
       	    else:
	                  pattern.remove(i)
lastmove=0
player1="\x1b[1;32mX"
player2="\x1b[1;34mO"
turn=player1
ply={"\x1b[1;32mX":"player1","\x1b[1;34mO":"player2"}
print("\x1b[1;39m")
ch = raw_input("[1] . 1VS1\n[2] . Lawan Bot\npilihan : ")
if ch == "1":
 while True:
   box="""\x1b[1;33m      ╔═══╦═══╦═══╗
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╠═══╣═══╣═══╣
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╠═══╣═══╣═══╣
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╚═══╩═══╩═══╝\x1b[1;39m""".format(board[0],board[1],board[2],board[3],board[4],board[5],board[6],board[7],board[8])
   if board[0] == board[1] == board[2] and board[0] != " " or board[0] == board[3] == board[6] and board[0] != " " or  board[0] == board[4] == board[8] and board[0] != " ":
      winner=ply[board[0]]
      print (box)
      print (winner+" Menang")
      break
   elif board[1] == board[4] == board[7] and board[1] != " ":
      winner=ply[board[1]]
      print (box)
      print (winner+" Menang")
      break
   elif board[6] == board[4] == board[2] and board[6] != " " or  board[6] == board[7] == board[8] and board[6] != " ":
      winner=ply[board[6]]
      print(box)
      print (winner+" Menang")
      break
   elif board[8] == board[5] == board[2] and board[8] != " ":
      winner=ply[board[8]]
      print (box)
      print (winner+" Menang")
      break
   elif board[3] == board[4] == board[5] and board[3] != " ":
      winner=ply[board[8]]
      print (box)
      print (winner+" Menang")
      break
   elif " " not in board:
      print (box)
      print ("Draw")
      break

   if turn == player1:
     while True:
      os.system("clear")
      print (box)
      print ("Giliran Pemain 1 ")
      jalan=int(raw_input("Kotak Nomor : "))-1
      if board[jalan] == " ":
         board[jalan]=turn
	 lastmove=jalan+1
         turn=player2
         break
      else:
         print ("Kotak Ini Sudah Di Isi")
   elif turn == player2:
     while True:
      os.system("clear")
      print (box)
      print ("Giliran Pemain 2 ")
      jalan=int(raw_input("Kotak Nomor : "))-1
      if board[jalan] == " ":
         board[jalan]=turn
         turn=player1
	 lastmove=jalan+1
         break
      else:
         print ("Kotak Ini Sudah Di Isi")
         import time;time.sleep(2)
else:
 while True:
   box="""\x1b[1;33m      ╔═══╦═══╦═══╗
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╠═══╣═══╣═══╣
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╠═══╣═══╣═══╣
      ║ {} \x1b[1;33m║ {} \x1b[1;33m║ {} \x1b[1;33m║
      ╚═══╩═══╩═══╝\x1b[1;39m""".format(board[0],board[1],board[2],board[3],board[4],board[5],board[6],board[7],board[8])

   if board[0] == board[1] == board[2] and board[0] != " " or board[0] == board[3] == board[6] and board[0] != " " or  board[0] == board[4] == board[8] and board[0] != " ":
      winner=ply[board[0]]
      print (box)
      print (winner+" Menang")
      break
   elif board[1] == board[4] == board[7] and board[1] != " ":
      winner=ply[board[1]]
      print (box)
      print (winner+" Menang")
      break
   elif board[6] == board[4] == board[2] and board[6] != " " or  board[6] == board[7] == board[8] and board[6] != " ":
      winner=ply[board[6]]
      print(box)
      print (winner+" Menang")
      break
   elif board[8] == board[5] == board[2] and board[8] != " ":
      winner=ply[board[8]]
      print (box)
      print (winner+" Menang")
      break
   elif " " not in board:
      print (box)
      print ("Draw")
      break

   if turn == player1:
     while True:
      os.system("clear")
      print (box)
      print ("Giliran Pemain 1 ")
      jalan=int(raw_input("Kotak Nomor : "))-1
      if board[jalan] == " ":
         board[jalan]=turn
         lastmove=jalan
         turn=player2
         break
      else:
         print ("Kotak Ini Sudah Di Isi")
   elif turn == player2:
     bestmuv(lastmove)
     turn=player1
'))